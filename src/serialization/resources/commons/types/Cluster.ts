/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { Chkk } from "@fern-api/chkk";
import * as core from "../../../../core";

export const Cluster: core.serialization.ObjectSchema<serializers.Cluster.Raw, Chkk.Cluster> =
    core.serialization.object({
        id: core.serialization.string(),
        name: core.serialization.string().optional(),
        internalK8SRef: core.serialization.property("internal_k8s_ref", core.serialization.string()),
        accountId: core.serialization.property("account_id", core.serialization.string()),
        region: core.serialization.string(),
        status: core.serialization.lazy(async () => (await import("../../..")).ClusterStatus),
        production: core.serialization.boolean().optional(),
        version: core.serialization.string(),
        nodeCount: core.serialization.property("node_count", core.serialization.number()),
        managedNgCount: core.serialization.property("managed_ng_count", core.serialization.number()),
        selfManagedNgCount: core.serialization.property("self_managed_ng_count", core.serialization.number()),
        containerRuntimes: core.serialization.property(
            "container_runtimes",
            core.serialization.list(core.serialization.string())
        ),
        labels: core.serialization.record(
            core.serialization.string(),
            core.serialization.lazy(async () => (await import("../../..")).InlineTypeString).optional()
        ),
        cloudProvider: core.serialization.property(
            "cloud_provider",
            core.serialization.lazy(async () => (await import("../../..")).KubernetesProvider)
        ),
        chkkMetadata: core.serialization.property(
            "chkk_metadata",
            core.serialization.lazyObject(async () => (await import("../../..")).ChkkAgent)
        ),
        created: core.serialization.number(),
        updated: core.serialization.number().optional(),
        rescan: core.serialization.lazy(async () => (await import("../../..")).ClusterRescan),
        eolDate: core.serialization.property("eol_date", core.serialization.number()),
        k8SReleaseDate: core.serialization.property("k8s_release_date", core.serialization.number()),
        k8SProviderRelease: core.serialization.property("k8s_provider_release", core.serialization.number()),
    });

export declare namespace Cluster {
    interface Raw {
        id: string;
        name?: string | null;
        internal_k8s_ref: string;
        account_id: string;
        region: string;
        status: serializers.ClusterStatus.Raw;
        production?: boolean | null;
        version: string;
        node_count: number;
        managed_ng_count: number;
        self_managed_ng_count: number;
        container_runtimes: string[];
        labels: Record<string, serializers.InlineTypeString.Raw | null | undefined>;
        cloud_provider: serializers.KubernetesProvider.Raw;
        chkk_metadata: serializers.ChkkAgent.Raw;
        created: number;
        updated?: number | null;
        rescan: serializers.ClusterRescan.Raw;
        eol_date: number;
        k8s_release_date: number;
        k8s_provider_release: number;
    }
}
