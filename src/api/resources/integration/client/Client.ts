/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Chkk } from "@fern-api/chkk";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Integration {
    interface Options {
        environment: environments.ChkkEnvironment | string;
        apiKey?: core.Supplier<string>;
    }
}

export class Integration {
    constructor(private readonly options: Integration.Options) {}

    /**
     * List the integrations configured in the Chkk account
     */
    public async list(): Promise<Chkk.ListIntegrationsResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "integrations"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.ListIntegrationsResponse.parseOrThrow(
                _response.body as serializers.ListIntegrationsResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Create a new integration in the Chkk account
     */
    public async create(request: Chkk.CreateIntegrationRequest): Promise<Chkk.Integration> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "integrations"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.CreateIntegrationRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.Integration.parseOrThrow(_response.body as serializers.Integration.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * ???
     */
    public async getPrometheusMetricsScrape(): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "integrations/prometheus/metrics"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * ???
     */
    public async getPrometheusStatus(request: Chkk.GetPrometheusStatusRequest): Promise<void> {
        const { integrationName } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("integration_name", integrationName);
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "integrations/prometheus/status"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get the details of an existing integration
     */
    public async get(integrationId: string): Promise<Chkk.Integration> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `integrations/${integrationId}`),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.Integration.parseOrThrow(_response.body as serializers.Integration.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Update an existing integration (e.g. with new status)
     */
    public async update(integrationId: string, request: Chkk.UpdateIntegrationRequest): Promise<Chkk.Integration> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `integrations/${integrationId}`),
            method: "PUT",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.UpdateIntegrationRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.Integration.parseOrThrow(_response.body as serializers.Integration.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete an existing integration from the Chkk account
     */
    public async delete(integrationId: string): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `integrations/${integrationId}`),
            method: "DELETE",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieve the alert manager configuration snippet for the referenced integration
     */
    public async getAlertManagerConfig(integrationId: string): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `integrations/${integrationId}/alert_manager_config`),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * ???
     */
    public async getResource(request: Chkk.GetResourceRequest): Promise<void> {
        const { integrationType, resourceName } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("integration_type", integrationType);
        _queryParams.append("resource_name", resourceName);
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "resources"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * ???
     */
    public async createTicket(request: Chkk.CreateTicketRequest): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "tickets"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.CreateTicketRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
