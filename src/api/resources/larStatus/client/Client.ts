/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Chkk } from "@fern-api/chkk";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace LarStatus {
    interface Options {
        environment: environments.ChkkEnvironment | string;
        apiKey?: core.Supplier<string>;
    }
}

export class LarStatus {
    constructor(private readonly options: LarStatus.Options) {}

    /**
     * List the status of all LARs for a cluster
     */
    public async getAll(clusterId: string): Promise<Chkk.ListLaRsStatusResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `clusters/${clusterId}/lars/status`),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.ListLaRsStatusResponse.parseOrThrow(
                _response.body as serializers.ListLaRsStatusResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get the status of a specific LAR
     */
    public async get(clusterId: string, larId: string): Promise<Chkk.LarStatus> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `clusters/${clusterId}/lars/status/${larId}`),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.LarStatus.parseOrThrow(_response.body as serializers.LarStatus.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Ignore a specific LAR
     */
    public async ignore(clusterId: string, larId: string, request: Chkk.IgnoreLarRequestBody): Promise<Chkk.LarStatus> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `clusters/${clusterId}/lars/status/${larId}/ignore`),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.IgnoreLarRequestBody.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.LarStatus.parseOrThrow(_response.body as serializers.LarStatus.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Acknowledge a specific LAR
     */
    public async acknowledge(
        clusterId: string,
        larId: string,
        request: Chkk.AcknowledgeLarRequestBody
    ): Promise<Chkk.LarStatus> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `clusters/${clusterId}/lars/status/${larId}/acknowledge`),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.AcknowledgeLarRequestBody.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.LarStatus.parseOrThrow(_response.body as serializers.LarStatus.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * ???
     */
    public async getOverview(): Promise<Chkk.LarsOverviewResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "larsoverview"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.LarsOverviewResponse.parseOrThrow(
                _response.body as serializers.LarsOverviewResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
