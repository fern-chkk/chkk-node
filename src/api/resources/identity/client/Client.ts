/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import urlJoin from "url-join";
import * as errors from "../../../../errors";
import { Chkk } from "@fern-api/chkk";
import * as serializers from "../../../../serialization";

export declare namespace Identity {
    interface Options {
        environment: environments.ChkkEnvironment | string;
        apiKey?: core.Supplier<string>;
    }
}

export class Identity {
    constructor(private readonly options: Identity.Options) {}

    /**
     * Accept an invitation into a Chkk team. This does not require further authentication, as it only executes prior-created invitations.
     */
    public async acceptInvitation(inviteKey: string): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `accept/${inviteKey}`),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * List all teams in the given Chkk account
     */
    public async listTeams(
        accountSlug: string,
        request: Chkk.ListAccountTeamsRequest = {}
    ): Promise<Chkk.ListAccountTeamsResponse> {
        const { pageSize, continuationToken } = request;
        const _queryParams = new URLSearchParams();
        if (pageSize != null) {
            _queryParams.append("pageSize", pageSize.toString());
        }

        if (continuationToken != null) {
            _queryParams.append("continuation_token", continuationToken);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `accounts/${accountSlug}/teams`),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.ListAccountTeamsResponse.parseOrThrow(
                _response.body as serializers.ListAccountTeamsResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get the details for a specific Chkk team in the Chkk account
     */
    public async getAccount(accountSlug: string, teamSlug: string): Promise<Chkk.Team> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `accounts/${accountSlug}/teams/${teamSlug}`),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.Team.parseOrThrow(_response.body as serializers.Team.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * List the pending invitations to the Chkk team.
     */
    public async listInvitations(
        accountSlug: string,
        teamSlug: string,
        request: Chkk.ListTeamInvitationsRequest = {}
    ): Promise<Chkk.ListTeamInvitationsResponse> {
        const { pageSize, continuationToken } = request;
        const _queryParams = new URLSearchParams();
        if (pageSize != null) {
            _queryParams.append("pageSize", pageSize.toString());
        }

        if (continuationToken != null) {
            _queryParams.append("continuation_token", continuationToken);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `accounts/${accountSlug}/teams/${teamSlug}/invitations`),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.ListTeamInvitationsResponse.parseOrThrow(
                _response.body as serializers.ListTeamInvitationsResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Add a new member to an existing Chkk Team. This creates an invitation as well as an email notification to the person added to accept the invitation (beforehand they will not be a member)
     */
    public async addMember(accountSlug: string, teamSlug: string, request: Chkk.AddTeamMemberRequest): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `accounts/${accountSlug}/teams/${teamSlug}/membership`),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.AddTeamMemberRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Remove a user from a Chkk team. The user won't be notified about this change.
     */
    public async deleteMember(accountSlug: string, teamSlug: string, userId: string): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `accounts/${accountSlug}/teams/${teamSlug}/membership/${userId}`),
            method: "DELETE",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Login the provided user, and make sure their core data structures are ready for use (e.g. that they have an account setup for them)
     */
    public async login(): Promise<Chkk.LoginResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "login"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.LoginResponse.parseOrThrow(_response.body as serializers.LoginResponse.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get the details for a specific organization
     */
    public async getOrganization(orgSlug: string): Promise<Chkk.Organization> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `orgs/${orgSlug}`),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.Organization.parseOrThrow(_response.body as serializers.Organization.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Update the details of a specific organization (e.g. the displayed name)
     */
    public async updateOrganization(
        orgSlug: string,
        request: Chkk.UpdateOrganizationRequest
    ): Promise<Chkk.Organization> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `orgs/${orgSlug}`),
            method: "PUT",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.UpdateOrganizationRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.Organization.parseOrThrow(_response.body as serializers.Organization.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * List the access tokens for the different accounts in the Chkk organization (for the calling user)
     */
    public async listAccessTokens(orgSlug: string): Promise<Chkk.ListAccessTokensResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `orgs/${orgSlug}/tokens`),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.ListAccessTokensResponse.parseOrThrow(
                _response.body as serializers.ListAccessTokensResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get the ingestion token for the account
     */
    public async getIngestionToken(id: string): Promise<Chkk.GetIngestionTokenResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `ingestion_scopes/${id}/token`),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.GetIngestionTokenResponse.parseOrThrow(
                _response.body as serializers.GetIngestionTokenResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get details of the calling user
     */
    public async getUser(): Promise<Chkk.GetUsersResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "users"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.GetUsersResponse.parseOrThrow(_response.body as serializers.GetUsersResponse.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
