/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Chkk } from "@fern-api/chkk";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Scan {
    interface Options {
        environment: environments.ChkkEnvironment | string;
        apiKey?: core.Supplier<string>;
    }
}

export class Scan {
    constructor(private readonly options: Scan.Options) {}

    /**
     * ???
     */
    public async getClusterRescanState(clusterId: string): Promise<Chkk.Cluster> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `clusters/${clusterId}/rescan`),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.Cluster.parseOrThrow(_response.body as serializers.Cluster.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * ???
     */
    public async createRescanCluster(clusterId: string, request: Chkk.RescanClusterRequestBody): Promise<Chkk.Cluster> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `clusters/${clusterId}/rescan`),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.RescanClusterRequestBody.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.Cluster.parseOrThrow(_response.body as serializers.Cluster.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * ???
     */
    public async createClusterScan(
        clusterId: string,
        request: Chkk.CreateClusterScanRequestBody
    ): Promise<Chkk.Cluster> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `clusters/${clusterId}/scan`),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.CreateClusterScanRequestBody.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.Cluster.parseOrThrow(_response.body as serializers.Cluster.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * ???
     */
    public async getAllScans(): Promise<Chkk.ListClusterScansResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "scans"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.ListClusterScansResponse.parseOrThrow(
                _response.body as serializers.ListClusterScansResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * ???
     */
    public async createScan(request: Chkk.CreateScanRequestBody): Promise<Chkk.CreateScanResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "scans"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.CreateScanRequestBody.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.CreateScanResponse.parseOrThrow(
                _response.body as serializers.CreateScanResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
