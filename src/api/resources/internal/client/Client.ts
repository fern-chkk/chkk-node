/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Chkk } from "@fern-api/chkk";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Internal {
    interface Options {
        environment: environments.ChkkEnvironment | string;
        apiKey?: core.Supplier<string>;
    }
}

export class Internal {
    constructor(private readonly options: Internal.Options) {}

    /**
     * Endpoint for the Amplitude tunnel used by the web apps to report analytics.
     */
    public async createProxyAmplitudeEvent(request: Chkk.AmplitudeAnalyticsReport): Promise<Record<string, unknown>> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "chkk-analytics"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.AmplitudeAnalyticsReport.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.internal.createProxyAmplitudeEvent.Response.parseOrThrow(
                _response.body as serializers.internal.createProxyAmplitudeEvent.Response.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Endpoint for reporting feedback about Chkk of different nature - user sign-up requests, k8s questions or general feedback
     */
    public async submitFeedback(request: Chkk.SubmitFeedbackRequestBody): Promise<Chkk.SubmitFeedbackResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "feedbacks"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.SubmitFeedbackRequestBody.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.SubmitFeedbackResponse.parseOrThrow(
                _response.body as serializers.SubmitFeedbackResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * ???
     */
    public async getInsights(): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "insights"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * ???
     */
    public async getInsightsPeriods(): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "insights/periods"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * ???
     */
    public async getKba(arsigId: string): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `kbas/${arsigId}`),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * ???
     */
    public async getQuickStartState(): Promise<Chkk.QuickStartResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "quick-start"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return await serializers.QuickStartResponse.parseOrThrow(
                _response.body as serializers.QuickStartResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Endpoint for the Sentry tunnel used by the web apps to report issues.
     *
     * See https://docs.sentry.io/platforms/javascript/troubleshooting/#using-the-tunnel-option for more details.
     *
     * The requests are in POST form, and consist of 3 lines with the first being a form of header containing the DSN of the report. The other lines report metadata as well as the stacktrace/breadcrumbs.
     *
     */
    public async createProxySentryReport(): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "sentry-proxy"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * List the AvailabilityRisks in the account, filtered by the query parameters
     */
    public async getAllAvailabilityRisks(
        request: Chkk.ListAvailabilityRisksRequest = {}
    ): Promise<Chkk.ListAvailabilityRisksResponse> {
        const { pageSize, continuationToken } = request;
        const _queryParams = new URLSearchParams();
        if (pageSize != null) {
            _queryParams.append("pageSize", pageSize.toString());
        }

        if (continuationToken != null) {
            _queryParams.append("continuation_token", continuationToken);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "availability_risks"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.ListAvailabilityRisksResponse.parseOrThrow(
                _response.body as serializers.ListAvailabilityRisksResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Return aggregate counts for the AvailabilityRisks in the account, filtered and grouped by the query parameters
     */
    public async getAvailabilityRisksSummary(
        request: Chkk.GetAvailabilityRisksSummaryRequest
    ): Promise<Chkk.AvailabilityRisksSummary> {
        const { count } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("count", count);
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "availability_risks/summary"),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.AvailabilityRisksSummary.parseOrThrow(
                _response.body as serializers.AvailabilityRisksSummary.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * List the resourcs in this account affected by the AvailabilityRisk
     */
    public async getAvailabilityRiskAffectedResource(
        availabilityRiskId: string,
        request: Chkk.GetAvailabilityRiskAffectedResourceRequest = {}
    ): Promise<Chkk.ListAffectedResourcesResponse> {
        const { pageSize, continuationToken } = request;
        const _queryParams = new URLSearchParams();
        if (pageSize != null) {
            _queryParams.append("pageSize", pageSize.toString());
        }

        if (continuationToken != null) {
            _queryParams.append("continuation_token", continuationToken);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `availability_risks/${availabilityRiskId}/affected_resources`),
            method: "GET",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.ListAffectedResourcesResponse.parseOrThrow(
                _response.body as serializers.ListAffectedResourcesResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
