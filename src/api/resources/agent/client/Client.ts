/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Chkk } from "@fern-api/chkk";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Agent {
    interface Options {
        environment: environments.ChkkEnvironment | string;
        apiKey?: core.Supplier<string>;
    }
}

export class Agent {
    constructor(private readonly options: Agent.Options) {}

    /**
     * Submit status notification for an agent
     */
    public async submitAgentStatusNotification(request: Chkk.SubmitAgentStatusNotificationRequestBody): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/notifications/agent-status"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.SubmitAgentStatusNotificationRequestBody.jsonOrThrow(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Submit an install notification for an agent
     */
    public async submitAgentInstallNotification(): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, "/notifications/agent-install"),
            method: "POST",
            headers: {
                Authorization: await core.Supplier.get(this.options.apiKey),
            },
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ChkkError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ChkkError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ChkkTimeoutError();
            case "unknown":
                throw new errors.ChkkError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
